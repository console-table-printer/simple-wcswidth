# Performance Testing Workflow
#
# This workflow runs performance benchmarks to ensure the library remains fast and efficient.
# It runs on every push/PR to main/master and can be triggered manually.
#
# What it measures:
# 1. wcwidth function performance - how fast single character width calculation is
# 2. wcswidth function performance - how fast string width calculation is
# 3. Memory usage under load - ensures no memory leaks
# 4. Bundle size - tracks if the package is getting larger
# 5. Performance regression detection - compares against baselines
#
# This helps catch performance issues early and ensures the library stays performant.

name: Performance Testing

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual trigger

jobs:
  benchmark:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build project
        run: yarn build

      - name: Run performance benchmarks with assertions
        run: |
          echo "Running wcwidth performance tests..."
          node -e "
            const { wcwidth } = require('./dist/index.js');
            const iterations = 1000000;
            const start = performance.now();
            
            for (let i = 0; i < iterations; i++) {
              wcwidth(65); // 'A'
              wcwidth(0x4E00); // '一'
              wcwidth(0); // null
            }
            
            const end = performance.now();
            const avgTime = (end - start) / iterations;
            const totalTime = end - start;
            
            console.log(\`wcwidth: \${avgTime.toFixed(6)}ms per call\`);
            console.log(\`Total time: \${totalTime.toFixed(2)}ms for \${iterations} calls\`);
            
            // Performance assertions
            const MAX_AVG_TIME = 0.0001; // 0.1 microseconds per call
            const MAX_TOTAL_TIME = 200; // 200ms for 1M calls
            
            if (avgTime > MAX_AVG_TIME) {
              console.error(\`❌ wcwidth performance degraded! Average time \${avgTime.toFixed(6)}ms exceeds limit of \${MAX_AVG_TIME}ms\`);
              process.exit(1);
            }
            
            if (totalTime > MAX_TOTAL_TIME) {
              console.error(\`❌ wcwidth total time \${totalTime.toFixed(2)}ms exceeds limit of \${MAX_TOTAL_TIME}ms\`);
              process.exit(1);
            }
            
            console.log('✅ wcwidth performance within acceptable limits');
          "

      - name: Run wcswidth performance tests with assertions
        run: |
          echo "Running wcswidth performance tests..."
          node -e "
            const { wcswidth } = require('./dist/index.js');
            const testStrings = [
              'Hello World',
              'Hello 世界',
              'A'.repeat(1000),
              '一'.repeat(100),
              'Hello\u0000World'
            ];
            
            const iterations = 10000;
            const start = performance.now();
            
            for (let i = 0; i < iterations; i++) {
              testStrings.forEach(str => wcswidth(str));
            }
            
            const end = performance.now();
            const avgTime = (end - start) / (iterations * testStrings.length);
            const totalTime = end - start;
            
            console.log(\`wcswidth: \${avgTime.toFixed(6)}ms per call\`);
            console.log(\`Total time: \${totalTime.toFixed(2)}ms for \${iterations * testStrings.length} calls\`);
            
            // Performance assertions
            const MAX_AVG_TIME = 0.001; // 1 microsecond per call
            const MAX_TOTAL_TIME = 1000; // 1 second for all calls
            
            if (avgTime > MAX_AVG_TIME) {
              console.error(\`❌ wcswidth performance degraded! Average time \${avgTime.toFixed(6)}ms exceeds limit of \${MAX_AVG_TIME}ms\`);
              process.exit(1);
            }
            
            if (totalTime > MAX_TOTAL_TIME) {
              console.error(\`❌ wcswidth total time \${totalTime.toFixed(2)}ms exceeds limit of \${MAX_TOTAL_TIME}ms\`);
              process.exit(1);
            }
            
            console.log('✅ wcswidth performance within acceptable limits');
          "

      - name: Memory usage test with assertions
        run: |
          echo "Testing memory usage..."
          node -e "
            const { wcswidth, wcwidth } = require('./dist/index.js');
            
            const initialMemory = process.memoryUsage();
            console.log('Initial memory:', initialMemory);
            
            // Perform intensive operations
            for (let i = 0; i < 100000; i++) {
              wcswidth('Hello World ' + i);
              wcwidth(i % 65536);
            }
            
            const finalMemory = process.memoryUsage();
            console.log('Final memory:', finalMemory);
            
            const memoryIncrease = {
              heapUsed: finalMemory.heapUsed - initialMemory.heapUsed,
              heapTotal: finalMemory.heapTotal - initialMemory.heapTotal,
              external: finalMemory.external - initialMemory.external
            };
            
            console.log('Memory increase:', memoryIncrease);
            
            // Memory assertions
            const MAX_HEAP_INCREASE = 10 * 1024 * 1024; // 10MB
            const MAX_EXTERNAL_INCREASE = 5 * 1024 * 1024; // 5MB
            
            if (memoryIncrease.heapUsed > MAX_HEAP_INCREASE) {
              console.error(\`❌ Memory leak detected! Heap increase \${(memoryIncrease.heapUsed / 1024 / 1024).toFixed(2)}MB exceeds limit of \${MAX_HEAP_INCREASE / 1024 / 1024}MB\`);
              process.exit(1);
            }
            
            if (memoryIncrease.external > MAX_EXTERNAL_INCREASE) {
              console.error(\`❌ External memory increase \${(memoryIncrease.external / 1024 / 1024).toFixed(2)}MB exceeds limit of \${MAX_EXTERNAL_INCREASE / 1024 / 1024}MB\`);
              process.exit(1);
            }
            
            console.log('✅ Memory usage within acceptable limits');
          "

      - name: Bundle size check with assertions
        run: |
          echo "Checking bundle size..."
          BUNDLE_SIZE=$(du -b dist/index.js | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE bytes"

          # Bundle size assertions
          MAX_BUNDLE_SIZE=50000 # 50KB

          if [ "$BUNDLE_SIZE" -gt "$MAX_BUNDLE_SIZE" ]; then
            echo "❌ Bundle size $BUNDLE_SIZE bytes exceeds limit of $MAX_BUNDLE_SIZE bytes"
            exit 1
          fi

          echo "✅ Bundle size within acceptable limits"

          echo "Number of lines in dist:"
          find dist -name "*.js" -exec wc -l {} \;

      - name: Performance regression check
        run: |
          echo "✅ All performance tests passed!"
          echo "Performance metrics are within acceptable limits:"
          echo "- wcwidth: < 0.1μs per call"
          echo "- wcswidth: < 1μs per call"
          echo "- Memory: < 10MB heap increase"
          echo "- Bundle: < 50KB"
